#include "Vector.h"
#include "ArrayEx.h"
#include "Matrix.h"

#define MAP_DATA_NULL		-1
#define MAP_DATA_AVOID		11115
#define MAP_DATA_FILL		11111

int Waypoints[] = {119, 145, 157, 156, 402, 323, 288, 298, 237, 324, 238, 496, 511, 494, 539, 398, 429};
DWORD LastLevel;

LVA Vectors[] =
{
	{MAP_A1_ROGUE_ENCAMPMENT, VECTOR_NEXT_LEVEL, MAP_A1_BLOOD_MOOR, TARGET_LEVEL},
	{MAP_A1_ROGUE_ENCAMPMENT, VECTOR_PREVIOUS_LEVEL, 267, UNIT_TYPE_OBJECT},

	{MAP_A1_BLOOD_MOOR, VECTOR_NEXT_LEVEL, MAP_A1_COLD_PLAINS, TARGET_LEVEL},
	{MAP_A1_BLOOD_MOOR, VECTOR_PREVIOUS_LEVEL, MAP_A1_ROGUE_ENCAMPMENT, TARGET_LEVEL},
	{MAP_A1_BLOOD_MOOR, VECTOR_QUEST, MAP_A1_DEN_OF_EVIL, TARGET_LEVEL},

	{MAP_A1_DEN_OF_EVIL, VECTOR_PREVIOUS_LEVEL, MAP_A1_BLOOD_MOOR, TARGET_LEVEL},

	{MAP_A1_COLD_PLAINS, VECTOR_NEXT_LEVEL, MAP_A1_STONY_FIELD, TARGET_LEVEL},
	{MAP_A1_COLD_PLAINS, VECTOR_PREVIOUS_LEVEL, MAP_A1_BLOOD_MOOR, TARGET_LEVEL},
	
	//{MAP_A1_CAVE_LEVEL_1, VECTOR_UBERQUEST, MAP_A1_CAVE_LEVEL_2, TARGET_LEVEL},

	{MAP_A1_BURIAL_GROUNDS, VECTOR_PREVIOUS_LEVEL, MAP_A1_COLD_PLAINS, TARGET_LEVEL},
	//{MAP_A1_BURIAL_GROUNDS, VECTOR_UBERQUEST, MAP_A1_CRYPT, TARGET_LEVEL},
	//{MAP_A1_BURIAL_GROUNDS, VECTOR_HEROICAREA, MAP_A1_MAUSOLEUM, TARGET_LEVEL},
	
	{MAP_A1_STONY_FIELD, VECTOR_NEXT_LEVEL, MAP_A1_UNDERGROUND_PASSAGE_LEVEL_1, TARGET_LEVEL},
	{MAP_A1_STONY_FIELD, VECTOR_PREVIOUS_LEVEL, MAP_A1_COLD_PLAINS, TARGET_LEVEL},
	{MAP_A1_STONY_FIELD, VECTOR_QUEST, 17, UNIT_TYPE_OBJECT},

	{MAP_A1_TRISTRAM, VECTOR_NEXT_LEVEL, 268, UNIT_TYPE_OBJECT},

	{MAP_A1_UNDERGROUND_PASSAGE_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A1_DARK_WOOD, TARGET_LEVEL},
	{MAP_A1_UNDERGROUND_PASSAGE_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A1_STONY_FIELD, TARGET_LEVEL},
	//{MAP_A1_UNDERGROUND_PASSAGE_LEVEL_1, VECTOR_UBERQUEST, MAP_A1_UNDERGROUND_PASSAGE_LEVEL_2, TARGET_LEVEL},

	{MAP_A1_DARK_WOOD, VECTOR_NEXT_LEVEL, MAP_A1_BLACK_MARSH, TARGET_LEVEL},
	{MAP_A1_DARK_WOOD, VECTOR_PREVIOUS_LEVEL, MAP_A1_UNDERGROUND_PASSAGE_LEVEL_1, TARGET_LEVEL},
	{MAP_A1_DARK_WOOD, VECTOR_QUEST, 30, UNIT_TYPE_OBJECT},

	{MAP_A1_BLACK_MARSH, VECTOR_NEXT_LEVEL, MAP_A1_TAMOE_HIGHLAND, TARGET_LEVEL},
	{MAP_A1_BLACK_MARSH, VECTOR_PREVIOUS_LEVEL, MAP_A1_DARK_WOOD, TARGET_LEVEL},
	//{MAP_A1_BLACK_MARSH, VECTOR_UBERQUEST, MAP_A1_FORGOTTEN_TOWER, TARGET_LEVEL},

	//{MAP_A1_HOLE_LEVEL_1, VECTOR_UBERQUEST, MAP_A1_HOLE_LEVEL_2, TARGET_LEVEL},

	{MAP_A1_FORGOTTEN_TOWER, VECTOR_NEXT_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_1, TARGET_LEVEL},
	{MAP_A1_FORGOTTEN_TOWER, VECTOR_PREVIOUS_LEVEL, MAP_A1_BLACK_MARSH, TARGET_LEVEL},

	{MAP_A1_TOWER_CELLAR_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_2, TARGET_LEVEL},
	{MAP_A1_TOWER_CELLAR_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A1_FORGOTTEN_TOWER, TARGET_LEVEL},

	{MAP_A1_TOWER_CELLAR_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_3, TARGET_LEVEL},
	{MAP_A1_TOWER_CELLAR_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_1, TARGET_LEVEL},

	{MAP_A1_TOWER_CELLAR_LEVEL_3, VECTOR_NEXT_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_4, TARGET_LEVEL},
	{MAP_A1_TOWER_CELLAR_LEVEL_3, VECTOR_PREVIOUS_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_2, TARGET_LEVEL},

	{MAP_A1_TOWER_CELLAR_LEVEL_4, VECTOR_NEXT_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_5, TARGET_LEVEL},
	{MAP_A1_TOWER_CELLAR_LEVEL_4, VECTOR_PREVIOUS_LEVEL, MAP_A1_TOWER_CELLAR_LEVEL_3, TARGET_LEVEL},

	{MAP_A1_TAMOE_HIGHLAND, VECTOR_NEXT_LEVEL, MAP_A1_MONASTERY_GATE, TARGET_LEVEL},
	{MAP_A1_TAMOE_HIGHLAND, VECTOR_PREVIOUS_LEVEL, MAP_A1_BLACK_MARSH, TARGET_LEVEL},
	
	//{MAP_A1_PIT_LEVEL_1, VECTOR_UBERQUEST, MAP_A1_PIT_LEVEL_2, TARGET_LEVEL},
	{MAP_A1_PIT_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A1_TAMOE_HIGHLAND, TARGET_LEVEL},

	{MAP_A1_MONASTERY_GATE, VECTOR_NEXT_LEVEL, MAP_A1_OUTER_CLOISTER, TARGET_LEVEL},
	{MAP_A1_MONASTERY_GATE, VECTOR_PREVIOUS_LEVEL, MAP_A1_TAMOE_HIGHLAND, TARGET_LEVEL},

	{MAP_A1_OUTER_CLOISTER, VECTOR_NEXT_LEVEL, MAP_A1_BARRACKS, TARGET_LEVEL},
	{MAP_A1_OUTER_CLOISTER, VECTOR_PREVIOUS_LEVEL, MAP_A1_MONASTERY_GATE, TARGET_LEVEL},

	{MAP_A1_BARRACKS, VECTOR_NEXT_LEVEL, MAP_A1_JAIL_LEVEL_1, TARGET_LEVEL},
	{MAP_A1_BARRACKS, VECTOR_PREVIOUS_LEVEL, MAP_A1_OUTER_CLOISTER, TARGET_LEVEL},
	{MAP_A1_BARRACKS, VECTOR_QUEST, 108, UNIT_TYPE_OBJECT},

	{MAP_A1_JAIL_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A1_JAIL_LEVEL_2, TARGET_LEVEL},
	{MAP_A1_JAIL_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A1_BARRACKS, TARGET_LEVEL},

	{MAP_A1_JAIL_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A1_JAIL_LEVEL_3, TARGET_LEVEL},
	{MAP_A1_JAIL_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A1_JAIL_LEVEL_1, TARGET_LEVEL},

	{MAP_A1_JAIL_LEVEL_3, VECTOR_NEXT_LEVEL, MAP_A1_INNER_CLOISTER, TARGET_LEVEL},
	{MAP_A1_JAIL_LEVEL_3, VECTOR_PREVIOUS_LEVEL, MAP_A1_JAIL_LEVEL_2, TARGET_LEVEL},

	{MAP_A1_INNER_CLOISTER, VECTOR_NEXT_LEVEL, 25, UNIT_TYPE_OBJECT},
	{MAP_A1_INNER_CLOISTER, VECTOR_PREVIOUS_LEVEL, MAP_A1_JAIL_LEVEL_3, TARGET_LEVEL},

	{MAP_A1_INNER_CLOISTER_2, VECTOR_NEXT_LEVEL, MAP_A1_CATACOMBS_LEVEL_1, TARGET_LEVEL},
	{MAP_A1_INNER_CLOISTER_2, VECTOR_PREVIOUS_LEVEL, MAP_A1_INNER_CLOISTER, TARGET_LEVEL},

	{MAP_A1_CATACOMBS_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A1_CATACOMBS_LEVEL_2, TARGET_LEVEL},
	{MAP_A1_CATACOMBS_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A1_INNER_CLOISTER_2, TARGET_LEVEL},

	{MAP_A1_CATACOMBS_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A1_CATACOMBS_LEVEL_3, TARGET_LEVEL},
	{MAP_A1_CATACOMBS_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A1_CATACOMBS_LEVEL_1, TARGET_LEVEL},

	{MAP_A1_CATACOMBS_LEVEL_3, VECTOR_NEXT_LEVEL, MAP_A1_CATACOMBS_LEVEL_4, TARGET_LEVEL},
	{MAP_A1_CATACOMBS_LEVEL_3, VECTOR_PREVIOUS_LEVEL, MAP_A1_CATACOMBS_LEVEL_2, TARGET_LEVEL},

	{MAP_A2_LUT_GHOLEIN, VECTOR_NEXT_LEVEL, MAP_A2_ROCKY_WASTE, TARGET_LEVEL},
	{MAP_A2_LUT_GHOLEIN, VECTOR_PREVIOUS_LEVEL, 267, UNIT_TYPE_OBJECT},

	{MAP_A2_ROCKY_WASTE, VECTOR_NEXT_LEVEL, MAP_A2_DRY_HILLS, TARGET_LEVEL},
	{MAP_A2_ROCKY_WASTE, VECTOR_PREVIOUS_LEVEL, MAP_A2_LUT_GHOLEIN, TARGET_LEVEL},
	//{MAP_A2_ROCKY_WASTE, VECTOR_HEROICAREA, MAP_A2_STONY_TOMB_LEVEL_1, TARGET_LEVEL},

	//{MAP_A2_STONY_TOMB_LEVEL_1, VECTOR_UBERQUEST, MAP_A2_STONY_TOMB_LEVEL_2, TARGET_LEVEL},

	{MAP_A2_DRY_HILLS, VECTOR_NEXT_LEVEL, MAP_A2_FAR_OASIS, TARGET_LEVEL},
	{MAP_A2_DRY_HILLS, VECTOR_PREVIOUS_LEVEL, MAP_A2_ROCKY_WASTE, TARGET_LEVEL},

	{MAP_A2_FAR_OASIS, VECTOR_NEXT_LEVEL, MAP_A2_LOST_CITY, TARGET_LEVEL},
	{MAP_A2_FAR_OASIS, VECTOR_PREVIOUS_LEVEL, MAP_A2_DRY_HILLS, TARGET_LEVEL},
	//{MAP_A2_FAR_OASIS, VECTOR_UBERQUEST2, 47, UNIT_TYPE_ROOMTILE},

	{MAP_A2_LOST_CITY, VECTOR_NEXT_LEVEL, MAP_A2_VALLEY_OF_SNAKES, TARGET_LEVEL},
	{MAP_A2_LOST_CITY, VECTOR_PREVIOUS_LEVEL, MAP_A2_FAR_OASIS, TARGET_LEVEL},
	//{MAP_A2_LOST_CITY, VECTOR_UBERQUEST, MAP_A2_ANCIENT_TUNNELS, TARGET_LEVEL},

	{MAP_A2_VALLEY_OF_SNAKES, VECTOR_NEXT_LEVEL, MAP_A2_CLAW_VIPER_TEMPLE_LEVEL_1, TARGET_LEVEL},
	{MAP_A2_VALLEY_OF_SNAKES, VECTOR_PREVIOUS_LEVEL, MAP_A2_LOST_CITY, TARGET_LEVEL},

	{MAP_A2_CLAW_VIPER_TEMPLE_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A2_CLAW_VIPER_TEMPLE_LEVEL_2, TARGET_LEVEL},
	{MAP_A2_CLAW_VIPER_TEMPLE_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_VALLEY_OF_SNAKES, TARGET_LEVEL},

	{MAP_A2_HAREM_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A2_HAREM_LEVEL_2, TARGET_LEVEL},
	{MAP_A2_HAREM_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_LUT_GHOLEIN, TARGET_LEVEL},

	{MAP_A2_HAREM_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A2_PALACE_CELLAR_LEVEL_1, TARGET_LEVEL},
	{MAP_A2_HAREM_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A2_HAREM_LEVEL_1, TARGET_LEVEL},

	{MAP_A2_PALACE_CELLAR_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A2_PALACE_CELLAR_LEVEL_2, TARGET_LEVEL},
	{MAP_A2_PALACE_CELLAR_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_HAREM_LEVEL_2, TARGET_LEVEL},

	{MAP_A2_PALACE_CELLAR_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A2_PALACE_CELLAR_LEVEL_3, TARGET_LEVEL},
	{MAP_A2_PALACE_CELLAR_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A2_PALACE_CELLAR_LEVEL_1, TARGET_LEVEL},

	{MAP_A2_PALACE_CELLAR_LEVEL_3, VECTOR_NEXT_LEVEL, 298, UNIT_TYPE_OBJECT},
	{MAP_A2_PALACE_CELLAR_LEVEL_3, VECTOR_PREVIOUS_LEVEL, MAP_A2_PALACE_CELLAR_LEVEL_2, TARGET_LEVEL},

	{MAP_A2_ARCANE_SANCTUARY, VECTOR_NEXT_LEVEL, 752, UNIT_TYPE_MONSTER},
	{MAP_A2_ARCANE_SANCTUARY, VECTOR_PREVIOUS_LEVEL, 298, UNIT_TYPE_OBJECT},
	{MAP_A2_ARCANE_SANCTUARY, VECTOR_QUEST, 357, UNIT_TYPE_OBJECT},

	{MAP_A2_SEWERS_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A2_SEWERS_LEVEL_2, TARGET_LEVEL},
	{MAP_A2_SEWERS_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_LUT_GHOLEIN, TARGET_LEVEL},

	{MAP_A2_SEWERS_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A2_SEWERS_LEVEL_3, TARGET_LEVEL},
	{MAP_A2_SEWERS_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A2_SEWERS_LEVEL_1, TARGET_LEVEL},

	{MAP_A2_SEWERS_LEVEL_3, VECTOR_QUEST, 355, UNIT_TYPE_OBJECT},

	{MAP_A2_HALLS_OF_THE_DEAD_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A2_HALLS_OF_THE_DEAD_LEVEL_2, TARGET_LEVEL},
	{MAP_A2_HALLS_OF_THE_DEAD_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_DRY_HILLS, TARGET_LEVEL},

	{MAP_A2_HALLS_OF_THE_DEAD_LEVEL_2, VECTOR_UBERQUEST, MAP_A2_HALLS_OF_THE_DEAD_LEVEL_3, TARGET_LEVEL},
	{MAP_A2_HALLS_OF_THE_DEAD_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A2_HALLS_OF_THE_DEAD_LEVEL_1, TARGET_LEVEL},

	//{MAP_A2_MAGGOT_LAIR_LEVEL_1, VECTOR_UBERQUEST, MAP_A2_MAGGOT_LAIR_LEVEL_2, TARGET_LEVEL},

	//{MAP_A2_MAGGOT_LAIR_LEVEL_2, VECTOR_UBERQUEST, MAP_A2_MAGGOT_LAIR_LEVEL_3, TARGET_LEVEL},

	{MAP_A2_MAGGOT_LAIR_LEVEL_3, VECTOR_QUEST, 356, UNIT_TYPE_OBJECT},

	//{MAP_A2_MAGGOT_LAIR_LEVEL_3, VECTOR_NEXT_LEVEL, 749, UNIT_TYPE_MONSTER},
	//{MAP_A2_MAGGOT_LAIR_LEVEL_3, VECTOR_QUEST, 356, UNIT_TYPE_OBJECT},

	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_1, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_2, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_3, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_4, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_5, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_6, TARGET_LEVEL},
	{MAP_A2_CANYON_OF_THE_MAGI, VECTOR_QUEST, MAP_A2_TAL_RASHAS_TOMB_7, TARGET_LEVEL},

	{MAP_A2_TAL_RASHAS_TOMB_1, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_1, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_2, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_2, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_3, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_3, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_4, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_4, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_5, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_5, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_6, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_6, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A2_TAL_RASHAS_TOMB_7, VECTOR_PREVIOUS_LEVEL, MAP_A2_CANYON_OF_THE_MAGI, TARGET_LEVEL},
	{MAP_A2_TAL_RASHAS_TOMB_7, VECTOR_QUEST, 152, UNIT_TYPE_OBJECT},

	{MAP_A3_KURAST_DOCKS, VECTOR_NEXT_LEVEL, MAP_A3_SPIDER_FOREST, TARGET_LEVEL},
	{MAP_A3_KURAST_DOCKS, VECTOR_PREVIOUS_LEVEL, 267, UNIT_TYPE_OBJECT},

	{MAP_A3_SPIDER_FOREST, VECTOR_NEXT_LEVEL, MAP_A3_GREAT_MARSH, TARGET_LEVEL},
	{MAP_A3_SPIDER_FOREST, VECTOR_PREVIOUS_LEVEL, MAP_A3_KURAST_DOCKS, TARGET_LEVEL},
	//{MAP_A3_SPIDER_FOREST, VECTOR_UBERQUEST, MAP_A3_ARCHNID_LAIR, TARGET_LEVEL},
	//{MAP_A3_SPIDER_FOREST, VECTOR_UBERQUEST2, MAP_A3_SPIDER_CAVERN, TARGET_LEVEL},

	{MAP_A3_GREAT_MARSH, VECTOR_NEXT_LEVEL, MAP_A3_FLAYER_JUNGLE, TARGET_LEVEL},
	{MAP_A3_GREAT_MARSH, VECTOR_PREVIOUS_LEVEL, MAP_A3_SPIDER_FOREST, TARGET_LEVEL},

	{MAP_A3_FLAYER_JUNGLE, VECTOR_NEXT_LEVEL, MAP_A3_LOWER_KURAST, TARGET_LEVEL},
	{MAP_A3_FLAYER_JUNGLE, VECTOR_PREVIOUS_LEVEL, MAP_A3_GREAT_MARSH, TARGET_LEVEL},

	//{MAP_A3_FLAYER_JUNGLE, VECTOR_UBERQUEST, MAP_A3_FLAYER_DUNGEON_LEVEL_1, TARGET_LEVEL},

	{MAP_A3_LOWER_KURAST, VECTOR_NEXT_LEVEL, MAP_A3_KURAST_BAZAAR, TARGET_LEVEL},
	{MAP_A3_LOWER_KURAST, VECTOR_PREVIOUS_LEVEL, MAP_A3_FLAYER_JUNGLE, TARGET_LEVEL},

	{MAP_A3_KURAST_BAZAAR, VECTOR_NEXT_LEVEL, MAP_A3_UPPER_KURAST, TARGET_LEVEL},
	{MAP_A3_KURAST_BAZAAR, VECTOR_PREVIOUS_LEVEL, MAP_A3_LOWER_KURAST, TARGET_LEVEL},
	//{MAP_A3_KURAST_BAZAAR, VECTOR_UBERQUEST, MAP_A3_DISUSED_FANE, TARGET_LEVEL},
	{MAP_A3_KURAST_BAZAAR, VECTOR_QUEST, MAP_A3_RUINED_TEMPLE, TARGET_LEVEL},
	//{MAP_A3_KURAST_BAZAAR, VECTOR_UBERQUEST2,MAP_A3_SEWERS_LEVEL_1, TARGET_LEVEL},

	{MAP_A3_UPPER_KURAST, VECTOR_NEXT_LEVEL, MAP_A3_KURAST_CAUSEWAY, TARGET_LEVEL},
	{MAP_A3_UPPER_KURAST, VECTOR_PREVIOUS_LEVEL, MAP_A3_KURAST_BAZAAR, TARGET_LEVEL},
	//{MAP_A3_UPPER_KURAST, VECTOR_UBERQUEST, MAP_A3_FORGOTTEN_RELIQUARY, TARGET_LEVEL},
	//{MAP_A3_UPPER_KURAST, VECTOR_UBERQUEST2, MAP_A3_SEWERS_LEVEL_1, TARGET_LEVEL},
	

	//{MAP_A3_SEWERS_LEVEL_1, VECTOR_UBERQUEST, MAP_A3_SEWERS_LEVEL_2, TARGET_LEVEL},

	{MAP_A3_KURAST_CAUSEWAY, VECTOR_NEXT_LEVEL, MAP_A3_TRAVINCAL, TARGET_LEVEL},
	//{MAP_A3_KURAST_CAUSEWAY, VECTOR_UBERQUEST, MAP_A3_RUINED_FANE, TARGET_LEVEL},
	//{MAP_A3_KURAST_CAUSEWAY, VECTOR_UBERQUEST2, MAP_A3_DISUSED_RELIQUARY, TARGET_LEVEL},

	{MAP_A3_TRAVINCAL, VECTOR_NEXT_LEVEL, 386, UNIT_TYPE_OBJECT},
	{MAP_A3_TRAVINCAL, VECTOR_PREVIOUS_LEVEL, MAP_A3_KURAST_CAUSEWAY, TARGET_LEVEL},

	{MAP_A3_DURANCE_OF_HATE_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A3_DURANCE_OF_HATE_LEVEL_2, TARGET_LEVEL},
	{MAP_A3_DURANCE_OF_HATE_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A3_TRAVINCAL, TARGET_LEVEL},

	{MAP_A3_DURANCE_OF_HATE_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A3_DURANCE_OF_HATE_LEVEL_3, TARGET_LEVEL},
	{MAP_A3_DURANCE_OF_HATE_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A3_DURANCE_OF_HATE_LEVEL_1, TARGET_LEVEL},

	{MAP_A3_DURANCE_OF_HATE_LEVEL_3, VECTOR_QUEST, 242, UNIT_TYPE_MONSTER},

	{MAP_A3_SWAMPY_PIT_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A3_SWAMPY_PIT_LEVEL_2, TARGET_LEVEL},
	{MAP_A3_SWAMPY_PIT_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A3_FLAYER_JUNGLE, TARGET_LEVEL},

	{MAP_A3_SWAMPY_PIT_LEVEL_2, VECTOR_UBERQUEST, MAP_A3_SWAMPY_PIT_LEVEL_3, TARGET_LEVEL},
	{MAP_A3_SWAMPY_PIT_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A3_SWAMPY_PIT_LEVEL_1, TARGET_LEVEL},

	{MAP_A3_SWAMPY_PIT_LEVEL_3, VECTOR_QUEST, 397, UNIT_TYPE_OBJECT},

	//{MAP_A3_FLAYER_DUNGEON_LEVEL_1, VECTOR_UBERQUEST, MAP_A3_FLAYER_DUNGEON_LEVEL_2, TARGET_LEVEL},
	{MAP_A3_FLAYER_DUNGEON_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A3_FLAYER_JUNGLE, TARGET_LEVEL},

	//{MAP_A3_FLAYER_DUNGEON_LEVEL_2, VECTOR_UBERQUEST, MAP_A3_FLAYER_DUNGEON_LEVEL_3, TARGET_LEVEL},
	{MAP_A3_FLAYER_DUNGEON_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A3_FLAYER_DUNGEON_LEVEL_1, TARGET_LEVEL},

	{MAP_A4_THE_PANDEMONIUM_FORTRESS, VECTOR_NEXT_LEVEL, MAP_A4_OUTER_STEPPES, TARGET_LEVEL},
	{MAP_A4_THE_PANDEMONIUM_FORTRESS, VECTOR_PREVIOUS_LEVEL, 267, UNIT_TYPE_OBJECT},

	{MAP_A4_OUTER_STEPPES, VECTOR_NEXT_LEVEL, MAP_A4_PLAINS_OF_DESPAIR, TARGET_LEVEL},
	{MAP_A4_OUTER_STEPPES, VECTOR_PREVIOUS_LEVEL, MAP_A4_THE_PANDEMONIUM_FORTRESS, TARGET_LEVEL},

	{MAP_A4_PLAINS_OF_DESPAIR, VECTOR_NEXT_LEVEL, MAP_A4_CITY_OF_THE_DAMNED, TARGET_LEVEL},
	{MAP_A4_PLAINS_OF_DESPAIR, VECTOR_PREVIOUS_LEVEL, MAP_A4_OUTER_STEPPES, TARGET_LEVEL},
	{MAP_A4_PLAINS_OF_DESPAIR, VECTOR_QUEST, 256, UNIT_TYPE_MONSTER},

	{MAP_A4_CITY_OF_THE_DAMNED, VECTOR_NEXT_LEVEL, MAP_A4_RIVER_OF_FLAME, TARGET_LEVEL},
	{MAP_A4_CITY_OF_THE_DAMNED, VECTOR_PREVIOUS_LEVEL, MAP_A4_PLAINS_OF_DESPAIR, TARGET_LEVEL},

	{MAP_A4_RIVER_OF_FLAME, VECTOR_NEXT_LEVEL, MAP_A4_THE_CHAOS_SANCTUARY, TARGET_LEVEL},
	{MAP_A4_RIVER_OF_FLAME, VECTOR_PREVIOUS_LEVEL, MAP_A4_CITY_OF_THE_DAMNED, TARGET_LEVEL},
	//{MAP_A4_RIVER_OF_FLAME, VECTOR_QUEST, 775, UNIT_TYPE_MONSTER},

	{MAP_A4_THE_CHAOS_SANCTUARY, VECTOR_NEXT_LEVEL, 255, UNIT_TYPE_OBJECT},
	{MAP_A4_THE_CHAOS_SANCTUARY, VECTOR_PREVIOUS_LEVEL, MAP_A4_RIVER_OF_FLAME, TARGET_LEVEL},

	{MAP_A5_HARROGATH, VECTOR_NEXT_LEVEL, MAP_A5_THE_BLOODY_FOOTHILLS, TARGET_LEVEL},
	{MAP_A5_HARROGATH, VECTOR_PREVIOUS_LEVEL, 267, UNIT_TYPE_OBJECT},
	//{MAP_A5_HARROGATH, VECTOR_QUEST, 513, UNIT_TYPE_MONSTER},

	{MAP_A5_THE_BLOODY_FOOTHILLS, VECTOR_NEXT_LEVEL, MAP_A5_FRIGID_HIGHLANDS, TARGET_LEVEL},
	{MAP_A5_THE_BLOODY_FOOTHILLS, VECTOR_PREVIOUS_LEVEL, MAP_A5_HARROGATH, TARGET_LEVEL},
	{MAP_A5_THE_BLOODY_FOOTHILLS, VECTOR_QUEST, 807, UNIT_TYPE_MONSTER},

	{MAP_A5_FRIGID_HIGHLANDS, VECTOR_NEXT_LEVEL, MAP_A5_ARREAT_PLATEAU, TARGET_LEVEL},
	{MAP_A5_FRIGID_HIGHLANDS, VECTOR_PREVIOUS_LEVEL, MAP_A5_THE_BLOODY_FOOTHILLS, TARGET_LEVEL},		
	//{MAP_A5_FRIGID_HIGHLANDS, VECTOR_UBERQUEST, 60, UNIT_TYPE_OBJECT},

	{MAP_A5_ARREAT_PLATEAU, VECTOR_NEXT_LEVEL, MAP_A5_CRYSTALLINE_PASSAGE, TARGET_LEVEL},
	{MAP_A5_ARREAT_PLATEAU, VECTOR_PREVIOUS_LEVEL, MAP_A5_FRIGID_HIGHLANDS, TARGET_LEVEL},
	//{MAP_A5_ARREAT_PLATEAU, VECTOR_UBERQUEST, 60, UNIT_TYPE_OBJECT},

	{MAP_A5_CRYSTALLINE_PASSAGE, VECTOR_NEXT_LEVEL, MAP_A5_GLACIAL_TRAIL, TARGET_LEVEL},
	{MAP_A5_CRYSTALLINE_PASSAGE, VECTOR_PREVIOUS_LEVEL, MAP_A5_ARREAT_PLATEAU, TARGET_LEVEL},
	{MAP_A5_CRYSTALLINE_PASSAGE, VECTOR_QUEST, MAP_A5_FROZEN_RIVER, TARGET_LEVEL},

	{MAP_A5_FROZEN_RIVER, VECTOR_QUEST, 793, UNIT_TYPE_MONSTER},

	{MAP_A5_GLACIAL_TRAIL, VECTOR_NEXT_LEVEL, MAP_A5_FROZEN_TUNDRA, TARGET_LEVEL},
	{MAP_A5_GLACIAL_TRAIL, VECTOR_UBERQUEST, MAP_A5_DRIFTER_CAVERN, TARGET_LEVEL},
	{MAP_A5_GLACIAL_TRAIL, VECTOR_PREVIOUS_LEVEL, MAP_A5_CRYSTALLINE_PASSAGE, TARGET_LEVEL},

	{MAP_A5_FROZEN_TUNDRA, VECTOR_NEXT_LEVEL, MAP_A5_THE_ANCIENTS_WAY, TARGET_LEVEL},
	{MAP_A5_FROZEN_TUNDRA, VECTOR_PREVIOUS_LEVEL, MAP_A5_GLACIAL_TRAIL, TARGET_LEVEL},
	//{MAP_A5_FROZEN_TUNDRA, VECTOR_UBERQUEST, 60, UNIT_TYPE_OBJECT},

	{MAP_A5_NIHLATHAKS_TEMPLE, VECTOR_NEXT_LEVEL, MAP_A5_HALLS_OF_ANGUISH, TARGET_LEVEL},
	{MAP_A5_NIHLATHAKS_TEMPLE, VECTOR_PREVIOUS_LEVEL, MAP_A5_HARROGATH, UNIT_TYPE_OBJECT},

	{MAP_A5_HALLS_OF_ANGUISH, VECTOR_NEXT_LEVEL, MAP_A5_HALLS_OF_PAIN, TARGET_LEVEL},
	{MAP_A5_HALLS_OF_ANGUISH, VECTOR_PREVIOUS_LEVEL, MAP_A5_NIHLATHAKS_TEMPLE, TARGET_LEVEL},

	{MAP_A5_HALLS_OF_PAIN, VECTOR_NEXT_LEVEL, MAP_A5_HALLS_OF_VAUGHT, TARGET_LEVEL},
	{MAP_A5_HALLS_OF_PAIN, VECTOR_PREVIOUS_LEVEL, MAP_A5_HALLS_OF_ANGUISH, TARGET_LEVEL},

	{MAP_A5_HALLS_OF_VAUGHT, VECTOR_PREVIOUS_LEVEL, MAP_A5_HALLS_OF_PAIN, TARGET_LEVEL},
	{MAP_A5_HALLS_OF_VAUGHT, VECTOR_QUEST, 462, UNIT_TYPE_OBJECT},

	{MAP_A5_THE_ANCIENTS_WAY, VECTOR_NEXT_LEVEL, MAP_A5_ARREAT_SUMMIT, TARGET_LEVEL},
	{MAP_A5_THE_ANCIENTS_WAY, VECTOR_PREVIOUS_LEVEL, MAP_A5_FROZEN_TUNDRA, TARGET_LEVEL},
	//{MAP_A5_THE_ANCIENTS_WAY, VECTOR_HEROICAREA, MAP_A5_ICY_CELLAR, TARGET_LEVEL},

	{MAP_A5_ARREAT_SUMMIT, VECTOR_NEXT_LEVEL, MAP_A5_WORLDSTONE_KEEP_LEVEL_1, TARGET_LEVEL},
	{MAP_A5_ARREAT_SUMMIT, VECTOR_PREVIOUS_LEVEL, MAP_A5_THE_ANCIENTS_WAY, TARGET_LEVEL},

	{MAP_A5_WORLDSTONE_KEEP_LEVEL_1, VECTOR_NEXT_LEVEL, MAP_A5_WORLDSTONE_KEEP_LEVEL_2, TARGET_LEVEL},
	{MAP_A5_WORLDSTONE_KEEP_LEVEL_1, VECTOR_PREVIOUS_LEVEL, MAP_A5_ARREAT_SUMMIT, TARGET_LEVEL},

	{MAP_A5_WORLDSTONE_KEEP_LEVEL_2, VECTOR_NEXT_LEVEL, MAP_A5_WORLDSTONE_KEEP_LEVEL_3, TARGET_LEVEL},
	{MAP_A5_WORLDSTONE_KEEP_LEVEL_2, VECTOR_PREVIOUS_LEVEL, MAP_A5_WORLDSTONE_KEEP_LEVEL_1, TARGET_LEVEL},

	{MAP_A5_WORLDSTONE_KEEP_LEVEL_3, VECTOR_NEXT_LEVEL, MAP_A5_THRONE_OF_DESTRUCTION, TARGET_LEVEL},
	{MAP_A5_WORLDSTONE_KEEP_LEVEL_3, VECTOR_PREVIOUS_LEVEL, MAP_A5_WORLDSTONE_KEEP_LEVEL_2, TARGET_LEVEL},

	//{MAP_A5_THRONE_OF_DESTRUCTION, VECTOR_NEXT_LEVEL, 563, UNIT_TYPE_OBJECT},
};

DWORD GetTileLevelNo(Room2 *lpRoom2, DWORD dwTileNo)
{
	for(RoomTile *pRoomTile = lpRoom2->pRoomTiles; pRoomTile; pRoomTile = pRoomTile->pNext)
	{
		if(*(pRoomTile->nNum) == dwTileNo)
			return pRoomTile->pRoom2->pLevel->dwLevelNo;
	}

	return NULL;
}

Level *GetUnitLevel(UnitAny *pUnit)
{
	if(pUnit)
		if(pUnit->pPath)
			if(pUnit->pPath->pRoom1)
				if(pUnit->pPath->pRoom1->pRoom2)
					return pUnit->pPath->pRoom1->pRoom2->pLevel;

	return false;
}

CMatrix<WORD, WORD> m_Map;
POINT m_LevelOrigin;

bool GetLevelExits(LPLEVELEXIT *lpLevel, int nMaxExits)
{
	POINT ptExitPoints[0x40][2];
	INT nTotalPoints = 0, nCurrentExit = 0;

	for(INT i = 0; i < m_Map.GetCX(); i++)
	{
		if(!(m_Map[i][0] % 2))
		{
			ptExitPoints[nTotalPoints][0].x = i;
			ptExitPoints[nTotalPoints][0].y = 0;

			for(i++; i < m_Map.GetCX(); i++)
			{
				if(m_Map[i][0] % 2)
				{
					ptExitPoints[nTotalPoints][1].x = i - 1;
					ptExitPoints[nTotalPoints][1].y = 0;
					break;
				}
			}

			nTotalPoints++;
			break;
		}
	}

	for(INT i = 0; i < m_Map.GetCX(); i++)
	{
		if(!(m_Map[i][m_Map.GetCY() - 1] % 2))
		{
			ptExitPoints[nTotalPoints][0].x = i;
			ptExitPoints[nTotalPoints][0].y = m_Map.GetCY() - 1;

			for(i++; i < m_Map.GetCX(); i++)
			{
				if((m_Map[i][m_Map.GetCY() - 1] % 2))
				{
					ptExitPoints[nTotalPoints][1].x = i - 1;
					ptExitPoints[nTotalPoints][1].y = m_Map.GetCY() - 1;
					break;
				}
			}

			nTotalPoints++;
			break;
		}
	}

	for(INT i = 0; i < m_Map.GetCY(); i++)
	{
		if(!(m_Map[0][i] % 2))
		{
			ptExitPoints[nTotalPoints][0].x = 0;
			ptExitPoints[nTotalPoints][0].y = i;

			for(i++; i < m_Map.GetCY(); i++)
			{
				if((m_Map[0][i] % 2))
				{
					ptExitPoints[nTotalPoints][1].x = 0;
					ptExitPoints[nTotalPoints][1].y = i - 1;
					break;
				}
			}

			nTotalPoints++;
			break;
		}
	}

	for(INT i = 0; i < m_Map.GetCY(); i++)
	{
		if(!(m_Map[m_Map.GetCX() - 1][i] % 2))
		{
			ptExitPoints[nTotalPoints][0].x = m_Map.GetCX() - 1;
			ptExitPoints[nTotalPoints][0].y = i;

			for(i++; i < m_Map.GetCY(); i++)
			{
				if((m_Map[m_Map.GetCX() - 1][i] % 2))
				{
					ptExitPoints[nTotalPoints][1].x = m_Map.GetCX() - 1;
					ptExitPoints[nTotalPoints][1].y = i - 1;
					break;
				}
			}

			nTotalPoints++;
			break;
		}
	}

	LPPOINT ptCenters = new POINT[nTotalPoints];

	for(INT i = 0; i < nTotalPoints; i++)
	{
		INT nXDiff = ptExitPoints[i][1].x - ptExitPoints[i][0].x;
		INT nYDiff = ptExitPoints[i][1].y - ptExitPoints[i][0].y;
		INT nXCenter = 0, nYCenter = 0;

		if(nXDiff > 0)
		{
			if(nXDiff % 2)
				nXCenter = ptExitPoints[i][0].x + ((nXDiff - (nXDiff % 2)) / 2);
			else
				nXCenter = ptExitPoints[i][0].x + (nXDiff / 2);
		}

		if(nYDiff > 0)
		{
			if(nYDiff % 2)
				nYCenter = ptExitPoints[i][0].y + ((nYDiff - (nYDiff % 2)) / 2);
			else
				nYCenter = ptExitPoints[i][0].y + (nYDiff / 2);
		}

		ptCenters[i].x = nXCenter ? nXCenter : ptExitPoints[i][0].x;
		ptCenters[i].y = nYCenter ? nYCenter : ptExitPoints[i][0].y;
	}

	for(Room2 *pRoom = GetUnitLevel(*D2Client::PlayerUnit)->pRoom2First; pRoom; pRoom = pRoom->pRoom2Next)
	{
		Room2 ** pNear = pRoom->pRoom2Near;

		for(DWORD i = 0; i < pRoom->dwRoomsNear; i++)
		{
			if(pNear[i]->pLevel->dwLevelNo != GetUnitLevel((*D2Client::PlayerUnit))->dwLevelNo)
			{
				INT nRoomX = pRoom->dwPosX * 5;
				INT nRoomY = pRoom->dwPosY * 5;

				for(INT j = 0; j < nTotalPoints; j++)
				{
					if((ptCenters[j].x + m_LevelOrigin.x) >= (WORD)nRoomX && (ptCenters[j].x + m_LevelOrigin.x) <= (WORD)(nRoomX + (pRoom->dwSizeX * 5)))
					{
						if((ptCenters[j].y + m_LevelOrigin.y) >= (WORD)nRoomY && (ptCenters[j].y + m_LevelOrigin.y) <= (WORD)(nRoomY + (pRoom->dwSizeY * 5)))
						{
							if(nCurrentExit >= nMaxExits)
								return FALSE;

							lpLevel[nCurrentExit] = new LEVELEXIT;
							lpLevel[nCurrentExit]->dwTargetLevel = pNear[i]->pLevel->dwLevelNo;
							lpLevel[nCurrentExit]->ptPos.x = ptCenters[j].x + m_LevelOrigin.x;
							lpLevel[nCurrentExit]->ptPos.y = ptCenters[j].y + m_LevelOrigin.y;
							nCurrentExit++;
						}
					}
				}

				break;
			}
		}

		BOOL bAdded = FALSE;

		if(!pRoom->pRoom1)
		{
			D2Common::AddRoomData((*D2Client::PlayerUnit)->pAct, pRoom->pLevel->dwLevelNo, pRoom->dwPosX, pRoom->dwPosY, (*D2Client::PlayerUnit)->pPath->pRoom1);
			bAdded = TRUE;
		}
			
		for(PresetUnit* pUnit = pRoom->pPreset; pUnit; pUnit = pUnit->pPresetNext)
		{
			if(nCurrentExit >= nMaxExits)
			{
				if(bAdded)
					D2Common::RemoveRoomData((*D2Client::PlayerUnit)->pAct, pRoom->pLevel->dwLevelNo, pRoom->dwPosX, pRoom->dwPosY, (*D2Client::PlayerUnit)->pPath->pRoom1);

				return FALSE;
			}

			if(pUnit->dwType == UNIT_TYPE_ROOMTILE)
			{
				DWORD dwTargetLevel = GetTileLevelNo(pRoom, pUnit->dwTxtFileNo);
				
				if(dwTargetLevel)
				{
					BOOL Exists = FALSE;

					for(INT i = 0; i < nCurrentExit; i++)
					{
						if((lpLevel[i]->ptPos.x == (pRoom->dwPosX * 5) + pUnit->dwPosX) &&
							(lpLevel[i]->ptPos.y == (pRoom->dwPosY * 5) + pUnit->dwPosY))
							Exists = TRUE;
					}

					if (!Exists)
					{
						lpLevel[nCurrentExit] = new LEVELEXIT;
						lpLevel[nCurrentExit]->dwTargetLevel = dwTargetLevel;
						lpLevel[nCurrentExit]->ptPos.x = (pRoom->dwPosX * 5) + pUnit->dwPosX;
						lpLevel[nCurrentExit]->ptPos.y = (pRoom->dwPosY * 5) + pUnit->dwPosY;
						nCurrentExit++;
					}
				}
			}
		}

		if(bAdded)
			D2Common::RemoveRoomData((*D2Client::PlayerUnit)->pAct, pRoom->pLevel->dwLevelNo, pRoom->dwPosX, pRoom->dwPosY, (*D2Client::PlayerUnit)->pPath->pRoom1);
	}

	return TRUE;
}

void DestroyVectors()
{
	if (!V_CurrentVectors.IsEmpty())
	{
		for (INT i = 0; i < V_CurrentVectors.GetSize(); i++)
		{
			if (V_CurrentVectors[i])
				delete V_CurrentVectors[i];
		}

		V_CurrentVectors.RemoveAll();
	}
}

PresetUnit *FindPresetUnit(DWORD dwClassId, DWORD dwType, Room2 **pRoom)
{
	for(Room2 *pRoom2 = GetUnitLevel(*D2Client::PlayerUnit)->pRoom2First; pRoom2; pRoom2 = pRoom2->pRoom2Next)
	{
		for(PresetUnit *pUnit = pRoom2->pPreset; pUnit; pUnit = pUnit->pPresetNext)
		{
			if(pUnit->dwType == dwType && pUnit->dwTxtFileNo == dwClassId)
			{
				*pRoom = pRoom2;
				return pUnit;
			}
		}
	}

	return NULL;
}

bool EnumerateVectors(){
	if (GetUnitLevel(*D2Client::PlayerUnit)->dwLevelNo != LastLevel){
		
		LPLEVELEXIT Levels[0x40] = {NULL};

		V_CurrentVectors.Lock();

		for (INT i = 0; i < V_CurrentVectors.GetSize(); i++)
			delete V_CurrentVectors[i];

		V_CurrentVectors.RemoveAll();
		GetLevelExits(Levels, 0x40);

		for (INT i = 0; i < ArraySize(Waypoints); i++)
		{
			Room2 *Room;
			PresetUnit *Unit = FindPresetUnit(Waypoints[i], UNIT_TYPE_OBJECT, &Room);

			if (!Unit)
				continue;

			VECTOR *Vector = new VECTOR;
			Vector->Position.x = ((Room->dwPosX * 5) + Unit->dwPosX) * 32;
			Vector->Position.y = ((Room->dwPosY * 5) + Unit->dwPosY) * 32;
			Vector->Type = VECTOR_WAYPOINT;
			Vector->Target = Waypoints[i];
			Vector->TargetType = UNIT_TYPE_OBJECT;
			V_CurrentVectors.Add(Vector);
			break;
		}

		for (INT i = 0; i < ArraySize(Vectors); i++)
		{
			if (Vectors[i].CurrentLevel != GetUnitLevel(*D2Client::PlayerUnit)->dwLevelNo)
				continue;

			if (Vectors[i].TargetType == TARGET_LEVEL)
			{
				for (INT l = 0; l < 0x40; l++)
				{
					if (!Levels[l])
						break;

					if (Vectors[i].Target != Levels[l]->dwTargetLevel)
						continue;

					if (Vectors[i].CurrentLevel == MAP_A2_CANYON_OF_THE_MAGI && Vectors[i].Target != (*D2Client::PlayerUnit)->pAct->pMisc->dwStaffTombLevel)
						continue;

					for (INT k = 0; k < V_CurrentVectors.GetSize(); k++)
					{
						if (V_CurrentVectors[k]->Type == Vectors[i].VectorType)
							goto Continue;
					}

					VECTOR *Vector = new VECTOR;
					Vector->Position.x = Levels[l]->ptPos.x * 32;
					Vector->Position.y = Levels[l]->ptPos.y * 32;
					Vector->Type = Vectors[i].VectorType;
					Vector->Target = Vectors[i].Target;
					Vector->TargetType = Vectors[i].TargetType;

					V_CurrentVectors.Add(Vector);
				}
			}

			else
			{
				Room2 *Room;
				PresetUnit *Unit = FindPresetUnit(Vectors[i].Target, Vectors[i].TargetType, &Room);

				if (!Unit)
					continue;

				for (INT k = 0; k < V_CurrentVectors.GetSize(); k++)
				{
					if (V_CurrentVectors[k]->Type == Vectors[i].VectorType)
						goto Continue;
				}

				VECTOR *Vector = new VECTOR;
				Vector->Position.x = ((Room->dwPosX * 5) + Unit->dwPosX) * 32;
				Vector->Position.y = ((Room->dwPosY * 5) + Unit->dwPosY) * 32;
				Vector->Type = Vectors[i].VectorType;
				Vector->Target = Vectors[i].Target;
				Vector->TargetType = Vectors[i].TargetType;

				V_CurrentVectors.Add(Vector);
			}

		Continue:
			continue;
		}
		LastLevel = GetUnitLevel(*D2Client::PlayerUnit)->dwLevelNo;
		V_CurrentVectors.Unlock();
	}
	return true;
}